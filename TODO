Keep Your Repo Tidy
    Meets Expectations:
        ✔ The repository does not contain the virtual environment folder nor the `__pycache__` @started(24-09-11 19:28) @done(24-09-11 19:34) @lasted(6m53s)
    
Database Setup
    Meets Expectations:
        ✔ A SQLite database named `inventory.db` was created @started(24-09-11 19:28) @done(24-09-11 19:34) @lasted(6m57s)
        ✔ the products table was created in the database using the `Product` model defined @started(24-09-11 19:28) @done(24-09-11 19:35) @lasted(7m3s)
        ✔ The brands table was created in the database using the Brands Model defined @started(24-09-11 19:28) @done(24-09-11 19:35) @lasted(7m9s)

The Brands Model
    Meets Expectations:
        The Brand model should have 2 columns:
            ✔ `brand_id` (Must be uniquely auto-generated) @started(24-09-11 19:28) @done(24-09-11 19:37) @lasted(9m5s)
            ✔ `brand_name` @started(24-09-11 19:28) @done(24-09-11 19:37) @lasted(9m5s)
            *NOTE: The value for each brand_id should be a unique value that is auto-generated by SQLAlchemy.
        
The Product Model
    Meets Expectations:
        The Product model should have 6 columns:
            ✔ `product_id` @started(24-09-11 19:28) @done(24-09-11 19:37) @lasted(9m2s)
            ✔ `product_name` @started(24-09-11 19:28) @done(24-09-11 19:37) @lasted(9m2s)
            ✔ `product_quantity` @started(24-09-11 19:28) @done(24-09-11 19:37) @lasted(9m2s)
            ✔ `product_price` @started(24-09-11 19:28) @done(24-09-11 19:37) @lasted(9m2s)
            ✔ `date_updated` @started(24-09-11 19:28) @done(24-09-11 19:37) @lasted(9m2s)
            ✔ `brand_id` (foreign key) @started(24-09-11 19:28) @done(24-09-11 19:37) @lasted(9m2s)
            *Note: The value for each `product_id` should be a unique value that is autogenerated by sqlalchemy

CSV to Database
    Meets Expectations:
        ✔ All data from `inventory.csv` and `brands.csv` were read and cleaned before adding it to the database @started(24-09-11 19:28) @done(24-09-26 08:39) @lasted(2w13h11m9s)
        ✔ `product_quantity` was stored as an INTEGER @started(24-09-11 19:28) @done(24-09-26 08:39) @lasted(2w13h11m9s)
        ✔ `product_price` was stored as an INTEGER converted to cents (ex: $3.19 becomes 319) @started(24-09-11 19:28) @done(24-09-26 08:39) @lasted(2w13h11m9s)
        ✔ `date_updated` will be stored as a DATE object @started(24-09-11 19:28) @done(24-09-26 08:39) @lasted(2w13h11m9s)
        ✔ `brand_id` must be an INTEGER and foreign key on the products table @started(24-09-11 19:28) @done(24-09-26 08:39) @lasted(2w13h11m9s)

Add existing data to the database
    Meets Expectations:
        ✔ The app successfully adds each product contained in the `inventory.csv` file to the database, with the correct value in the correct column @started(24-09-11 19:28) @done(24-09-29 21:08) @lasted(2w4d1h40m20s)
        ✔ `product_quantity` as an INTEGER @started(24-09-11 19:28) @done(24-09-26 08:39) @lasted(2w13h11m30s)
        ✔ `product_price` as an INTEGER @started(24-09-11 19:28) @done(24-09-26 08:39) @lasted(2w13h11m30s)
        ✔ `date_updated` as a DATE object @started(24-09-11 19:28) @done(24-09-26 08:39) @lasted(2w13h11m30s)
        ✔ `brand_id` must be an INTEGER and foreign key on the products table @started(24-09-11 19:28) @done(24-10-01 16:16) @lasted(2w5d20h48m3s)
        ✔ The `brands.csv` file has also been added to the database @started(24-09-11 19:28) @done(24-09-26 08:39) @lasted(2w13h11m25s)

    Exceeds Expectations:
        ✔ When the contents of `inventory.csv` are being imported and a duplicate product name is found, the app will check to see which product entry was most recently updated and overwrite existing data. @started(24-09-11 19:28) @done(24-09-29 21:08) @lasted(2w4d1h40m15s)
    
Menu Prompts
    Meets Expectations:
        When the program is run the user should be prompted with a simple menu of the following options:
            ✔ "View a single product's inventory" @started(24-09-11 19:28) @done(24-09-19 11:10) @lasted(1w15h42m37s)
            ✔ "Add a new product to the database" @started(24-09-11 19:28) @done(24-09-19 11:10) @lasted(1w15h42m37s)
            ✔ "View an analysis" @started(24-09-11 19:28) @done(24-09-19 11:10) @lasted(1w15h42m37s)
            ✔ "Make a backup of the entire inventory" @started(24-09-11 19:28) @done(24-09-19 11:10) @lasted(1w15h42m37s)
            *NOTE: 
                the user will be able to make this selection by pressing a single character(`v`, `n`, `a`, or `b`)
                If the user enters any character other than `v`, `n`, `a`, or `b`, then the app will notify them of their error and they can try again.

Menu Option: V
    Meets Expectations:
        ✔ When the user enters V, the User is prompted to enter a product ID number, and after doing so, a human-readable print of the correct product's information will be displayed in the terminal. @started(24-09-11 19:28) @done(24-09-26 08:40) @lasted(2w13h12m4s)
        NOTE: Product information data should always be queried from the database.
        If the user enters a product ID that does not exist, a human-readable error message will be displayed, and the user will be prompted to try again.

    Exceeds Expectations:
        ✔ After choosing a product, the user has the ability to edit or delete the product which is then reflected in the database @started(24-09-11 19:28) @done(24-09-29 21:08) @lasted(2w4d1h40m35s)
        ✔ When viewing a product, the brand name is shown instead of the brand id @started(24-09-11 19:28) @done(24-09-26 09:10) @lasted(2w13h42m6s)

Menu Option: N
    Meets Expectations:
        ✔ When the user enters N, they are prompted to enter a product's name, then the product's quantity, then the product's price, and the brand name. This product will then be successfully entered into the database. @started(24-09-11 19:28) @done(24-09-29 21:08) @lasted(2w4d1h40m41s)
    
    Exceeds Expectations:
        ✔ When entering this product into the database, if a duplicate product name is found, the app will update the conflicting entry with the information just provided. @started(24-09-11 19:28) @done(24-09-29 21:08) @lasted(2w4d1h40m47s)

Menu Option: A
    Meets Expectations:
        When the user Enters `a`
            ✔ the most expensive item in the database @started(24-09-11 19:28) @done(24-09-29 21:21) @lasted(2w4d1h53m23s)
            ✔ the least expensive item @started(24-09-11 19:28) @done(24-10-01 15:44) @lasted(2w5d20h16m45s)
            ✔ the brand that has the most poducts in the database @started(24-09-11 19:28) @done(24-10-01 15:44) @lasted(2w5d20h16m43s)

    Exceeds Expectations:
        ✔ Create two additional analysis points for the use to view @started(24-09-11 19:28) @done(24-10-01 15:44) @lasted(2w5d20h16m41s)

Menu Option: B
    Meets Expectations:
        When the user enters `b`
            ✔ create csv files called `backup_inventory.csv` and `backup_brands.csv`. It should contain the current contents of the database tables. @started(24-09-11 19:28) @done(24-10-01 15:59) @lasted(2w5d20h31m7s)
            NOTE: Each product must be on its own line, with each field value separated by a comma. This file must be generated into the project folder.

    Exceeds Expectations:
        ✔ The csv files contain a header row with the field titles @started(24-09-11 19:28) @done(24-10-01 16:15) @lasted(2w5d20h47m51s)
        ✔ The data is in the same format as the original csv with the price as `$0.00` rather than cents, date as `m/d/yyyy`, and the brand id as the brand name @started(24-09-11 19:28) @done(24-10-01 16:15) @lasted(2w5d20h47m51s)