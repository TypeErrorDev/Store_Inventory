Keep Your Repo Tidy
    Meets Expectations:
        ☐ The repositor y does not contain the virtual environment folder nor the `__pycache__`
    
Database Setup
    Meets Expectations:
        ☐ A SQLite database named `inventory.db` was created
        ☐ the products table was created in the database using the `Product` model defined
        ☐ The brands table was created in the database using the Brands Model defined

The Brands Model
    Meets Expectations:
        The Brand model should have 2 columns:
            ☐ `brand_id` (Must be uniquely auto-generated)
            ☐ `brand_name` 
            *NOTE: The value for each brand_id should be a unique value that is auto-generated by SQLAlchemy.
        
The Product Model
    Meets Expectations:
        The Product model should have 6 columns:
            ☐ `product_id`
            ☐ `product_name`
            ☐ `product_quantity`
            ☐ `product_price`
            ☐ `date_updated`
            ☐ `brand_id` (foreign key)
            *Note: The value for each `product_id` should be a unique value that is autogenerated by sqlalchemy

CSV to Database
    Meets Expectations:
        ☐ All data from `inventory.csv` and `brands.csv` were read and cleaned before adding it to the database
        ☐ `product_quantity` was stored as an INTEGER
        ☐ `product_price` was stored as an INTEGER converted to cents (ex: $3.19 becomes 319)
        ☐ `date_updated` will be stored as a DATE object
        ☐ `brand_id` must be an INTEGER and foreign key on the products table

Add existing data to the database
    Meets Expectations:
        ☐ The app successfully adds each product contained in the `inventory.csv` file to the database, with the correct value in the correct column
        ☐ `product_quantity` as an INTEGER
        ☐ `product_price` as an INTEGER
        ☐ `date_updated` as a DATE object
        ☐ `brand_id` must be an INTEGER and foreign key on the products table
        ☐ The `brands.csv` file has also been added to the database

    Exceeds Expectations:
        ☐ When the contents of `inventory.csv` are being imported and a duplicate product name is found, the app will check to see which product entry was most recently updated and overwrite existing data.
    
Menu Prompts
    Meets Expectations:
        When the program is run the user should be prompted with a simple menu of the following options:
            ☐ "View a single product's inventory"
            ☐ "Add a new product to the database"
            ☐ "View an analysis"
            ☐ "Make a backup of the entire inventory"
            *NOTE: 
                the user will be able to make this selection by pressing a single character(`v`, `n`, `a`, or `b`)
                If the user enters any character other than `v`, `n`, `a`, or `b`, then the app will notify them of their error and they can try again.

Menu Option: V
    Meets Expectations:
        ☐ When the user enters V, the User is prompted to enter a product ID number, and after doing so, a human-readable print of the correct product's information will be displayed in the terminal.
        NOTE: Product information data should always be queried from the database.
        If the user enters a product ID that does not exist, a human-readable error message will be displayed, and the user will be prompted to try again.

    Exceeds Expectations:
        ☐ After choosing a product, the user has the ability to edit or delete the product which is then reflected in the database
        ☐ When viewing a product, the brand name is shown instead of the brand id

Menu Option: N
    Meets Expectations:
        ☐ When the user enters N, they are prompted to enter a product's name, then the product's quantity, then the product's price, and the brand name. This product will then be successfully entered into the database.
    
    Exceeds Expectations:
        ☐ When entering this product into the database, if a duplicate product name is found, the app will update the conflicting entry with the information just provided.

Menu Option: A
    Meets Expectations:
        When the user Enters `a`
            ☐ the most expensive item in the database
            ☐ the least expensive item
            ☐ the brand that has the most poducts in the database

    Exceeds Expectations:
        ☐ Create two additional analysis points for the use to view

Menu Option: B
    Meets Expectations:
        When the user enters `b`
            ☐ create csv files called `backup_inventory.csv` and `backup_brands.csv`. It should contain the current contents of the database tables.
            NOTE: Each product must be on its own line, with each field value separated by a comma. This file must be generated into the project folder.

    Exceeds Expectations:
        ☐ The csv files contain a header row with the field titles
        ☐ The data is in the same format as the original csv with the price as `$0.00` rather than cents, date as `m/d/yyy`, and the brand id as the brand name